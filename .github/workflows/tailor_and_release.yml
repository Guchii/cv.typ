name: Tailor Resume, Build & Release

on:
  workflow_dispatch:
    inputs:
      job_description:
        description: 'Paste the Job Description here'
        required: true
        type: string
      release_title_prefix:
        description: 'Optional prefix for the release title (e.g., "Application for Acme Corp")'
        required: false
        type: string
        default: 'Tailored Resume'
      llm_model_name:
        description: 'OpenRouter model name to use for tailoring'
        required: false
        type: string
        default: 'google/gemini-2.5-pro-exp-03-25:free' # Default to the specified free Gemini model

permissions:
  contents: write # Needed to create releases

jobs:
  tailor_build_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
        shell: bash

      - name: Setup Lua
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.3 liblua5.3-dev luarocks
          sudo luarocks install dkjson
        shell: bash

      # Removed the separate 'Read base cv.yml' step as Lua script reads it directly

      - name: Construct LLM Prompt using Lua
        id: prompt
        run: |
          # Export necessary variables for the Lua script
          export CV_FILE_PATH='cv.yml' # Path relative to repo root
          export JOB_DESCRIPTION='${{ github.event.inputs.job_description }}'
          export MODEL_NAME='${{ github.event.inputs.llm_model_name }}'

          # Execute lua script and capture output
          # Ensure the script path is correct relative to the repo root
          json_payload=$(lua .github/scripts/construct_payload.lua)

          # Check if Lua script failed
          if [ $? -ne 0 ]; then
            echo "Error: Lua script failed to construct JSON payload."
            exit 1
          fi

          # Save the JSON payload to a temporary file
          echo "$json_payload" > payload.json
          echo "JSON payload saved to payload.json"

        shell: bash

      - name: Call OpenRouter LLM API
        id: llm_call
        run: |
          # Recommended headers for OpenRouter
          repo_url="https://github.com/${{ github.repository }}"
          project_title="CV Tailoring Workflow"

          # Check if payload file exists
          if [ ! -f payload.json ]; then
            echo "Error: payload.json not found!"
            exit 1
          fi
          echo "Sending payload from payload.json"

          response=$(curl -s -X POST "https://openrouter.ai/api/v1/chat/completions" \
            -H "Authorization: Bearer ${{ secrets.OPENROUTER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -H "HTTP-Referer: $repo_url" \
            -H "X-Title: $project_title" \
            -d @payload.json) # Read data from payload.json file

          # Check for errors in response (simple check, might need refinement)
          # OpenRouter errors might be structured differently, check for 'error' object
          if echo "$response" | yq -e '.error' > /dev/null; then
            echo "Error received from OpenRouter API:"
            echo "$response" | yq . # Pretty print JSON error
            exit 1
          fi

          # Extract content, handling potential JSON escapes
          llm_output=$(echo "$response" | yq -r '.choices[0].message.content')

          # Save raw output for debugging
          echo "$llm_output" > cv.llm.raw.yml

          # Attempt to clean potential markdown code fences if LLM added them
          cleaned_output=$(echo "$llm_output" | sed -e 's/^```yaml//' -e 's/^```//' -e 's/```$//')

          # Save cleaned output to file, ensuring newline at end
          echo "$cleaned_output" > cv.llm.yml
          echo "" >> cv.llm.yml # Ensure final newline

        shell: bash

      - name: Clean up payload file # Added cleanup step
        if: always() # Ensure cleanup runs even if previous steps fail
        run: rm -f payload.json
        shell: bash

      - name: Validate LLM Output YAML
        run: |
          echo "Validating LLM output YAML..."
          if yq eval 'true' cv.llm.yml > /dev/null; then
            echo "YAML validation successful."
          else
            echo "LLM output is not valid YAML. Failing workflow."
            echo "--- LLM Raw Output ---"
            cat cv.llm.raw.yml
            echo "--- End LLM Raw Output ---"
            exit 1
          fi
        shell: bash

      - name: Overwrite cv.yml with validated LLM output
        run: mv cv.llm.yml cv.yml
        shell: bash

      - name: Build Typst Resume with Tailored Data
        uses: lvignoli/typst-action@main
        with:
          source_file: shivom.typ
          output_file: shivom-tailored.pdf # Explicit output name

      - name: Prepare Release Info
        id: release_info
        run: |
          echo "DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "TAG_NAME=resume-run-${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=${{ github.event.inputs.release_title_prefix }} - ${{ env.DATE }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: shivom-tailored.pdf
          name: ${{ steps.release_info.outputs.RELEASE_NAME }}
          tag_name: ${{ steps.release_info.outputs.TAG_NAME }}
          body: |
            Resume tailored for job description using model: ${{ github.event.inputs.llm_model_name }}
            Triggered by: @${{ github.actor }}
            Run ID: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Default token is usually sufficient
